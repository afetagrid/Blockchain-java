type: edu
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                        "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                        "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                        "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/utils/StringUtil.java
  visible: true
  text: |
    package blockchain.utils;

    import blockchain.Block;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    public class StringUtil {

        public static boolean hasNumberOfZeros(String input, int numberOfZeros) {
            StringBuilder zeros = new StringBuilder();
            for (int i = 0; i < numberOfZeros; i++) {
                zeros.append("0");
            }
            return input.startsWith(zeros.toString()) && !input.startsWith(zeros.toString() + '0');
        }

        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");

                byte[] hash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import blockchain.utils.StringUtil;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;
    import java.util.concurrent.locks.Lock;
    import java.util.concurrent.locks.ReadWriteLock;
    import java.util.concurrent.locks.ReentrantReadWriteLock;

    public class Blockchain {
        private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
        private final Lock readLock = readWriteLock.readLock();
        private final Lock writeLock = readWriteLock.writeLock();

        private final List<Block> blocks;
        private int numberOfZeros;

        public Blockchain() {
            this.blocks = new ArrayList<>();
            this.numberOfZeros = 0;
        }

        private boolean validateBlockchain(Block newBlock) {
            if (blocks.size() == 0) {
                if (!StringUtil.hasNumberOfZeros(newBlock.getHash(), numberOfZeros)) {
                    return false;
                }
            } else {
                if (!Objects.equals(blocks.get(blocks.size() - 1).getHash(), newBlock.getPreviousHash()) ||
                        !StringUtil.hasNumberOfZeros(newBlock.getHash(), numberOfZeros)) {
                    return false;
                }
            }
            return true;
        }

        public Block getLastBlock() {
            readLock.lock();
            if (blocks.size() == 0) {
                readLock.unlock();
                return new Block(-1, 0L, -1L,"no messages", "0", -1L, "0");
            }
            Block lastBlock = blocks.get(blocks.size() - 1);
            readLock.unlock();
            return new Block(lastBlock);
        }

        public int getNumberOfZeros() {
            return numberOfZeros;
        }

        public boolean addNewBlock(Block newBlock, long timeSpent) {
            writeLock.lock();
            if (validateBlockchain(newBlock)) {
                blocks.add(new Block(newBlock));
                blocks.get(blocks.size() - 1).setGeneratedTime(timeSpent);
                if (timeSpent < 10) {
                    numberOfZeros++;
                    blocks.get(blocks.size() - 1).setNumberOfZerosStatus("N was increased to " + numberOfZeros);
                } else if (timeSpent < 60) {
                    blocks.get(blocks.size() - 1).setNumberOfZerosStatus("N stays the same");
                } else {
                    numberOfZeros--;
                    blocks.get(blocks.size() - 1).setNumberOfZerosStatus("N was decreased to " + numberOfZeros);
                }
                writeLock.unlock();
                return true;
            }
            writeLock.unlock();
            return false;
        }

        public void printBlockchain() {
            blocks.forEach(System.out::println);
        }
    }
  learner_created: true
- name: src/blockchain/Miner.java
  visible: true
  text: |
    package blockchain;

    import blockchain.utils.StringUtil;

    import java.util.Date;
    import java.util.Random;

    public class Miner implements Runnable {
        private final Integer id;
        private final String message;
        private final Blockchain blockchain;

        public Miner(Integer id, String message, Blockchain blockchain) {
            this.id = id;
            this.message = message;
            this.blockchain = blockchain;
        }

        private Long getProofOfWork(String input, int numberOfZeros) {
            StringBuilder zeros = new StringBuilder();
            for (int i = 0; i < numberOfZeros; i++) {
                zeros.append("0");
            }

            Random random = new Random();
            long magicNumber = random.nextLong();
            String generatedHash = StringUtil.applySha256(input + magicNumber);
            while (!(generatedHash.startsWith(zeros.toString()) && !generatedHash.startsWith(zeros.toString() + '0'))) {
                magicNumber = random.nextLong();
                generatedHash = StringUtil.applySha256(input + magicNumber);
            }
            return magicNumber;
        }

        @Override
        public void run() {
            boolean success = false;

            while (!success) {
                Block lastBlock = blockchain.getLastBlock();

                Long myBlockId = lastBlock.getId() + 1;
                Long myBlockTimestamp = new Date().getTime();
                String myMessage = (lastBlock.getId() == 0L) ? " no message" : message;
                String myBlockPreviousHash = lastBlock.getHash();

                String myBlockFields = id.toString() + myBlockId.toString() + myBlockTimestamp.toString() +
                        myMessage + myBlockPreviousHash;
                long start = System.currentTimeMillis();
                Long myMagicNumber = getProofOfWork(myBlockFields, blockchain.getNumberOfZeros());
                long finish = System.currentTimeMillis();
                long time = (finish - start) / 1000;

                String myBlockHash = StringUtil.applySha256(myBlockFields + myMagicNumber);

                Block myBlock = new Block(id, myBlockId, myBlockTimestamp, myMessage,
                        myBlockPreviousHash, myMagicNumber, myBlockHash);
                success = blockchain.addNewBlock(myBlock, time);
            }
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    public final class Block {

        private final Integer minerId;
        private final Long id;
        private final Long timeStamp;
        private final String blockData;
        private final String previousHash;
        private final Long magicNumber;
        private final String hash;

        private Long generatedTime;
        private String numberOfZerosStatus;

        public Block(Integer minerId, Long id, Long timeStamp, String blockData,
                     String previousHash, Long magicNumber, String hash) {
            this.minerId = minerId;
            this.id = id;
            this.timeStamp = timeStamp;
            this.blockData = blockData;
            this.previousHash = previousHash;
            this.magicNumber = magicNumber;
            this.hash = hash;
        }

        public Block(Block b) {
            this.minerId = b.minerId;
            this.id = b.id;
            this.timeStamp = b.timeStamp;
            this.blockData = b.blockData;
            this.previousHash = b.previousHash;
            this.magicNumber = b.magicNumber;
            this.hash = b.hash;
        }

        @Override
        public String toString() {
            return "Block:" + '\n' +
                    "Created by miner # " + minerId + '\n' +
                    "Id: " + id + '\n' +
                    "Timestamp: " + timeStamp + '\n' +
                    "Magic number: " + magicNumber + '\n' +
                    "Hash of the previous block:\n" + previousHash + '\n' +
                    "Hash of the block:\n" + hash + '\n' +
                    "Block data:" + blockData + '\n' +
                    "Block was generating for " + generatedTime + " seconds\n" +
                    numberOfZerosStatus + '\n';
        }

        public Integer getMinerId() {
            return minerId;
        }

        public Long getId() {
            return id;
        }

        public Long getTimeStamp() {
            return timeStamp;
        }

        public String getBlockData() {
            return blockData;
        }

        public String getPreviousHash() {
            return previousHash;
        }

        public Long getMagicNumber() {
            return magicNumber;
        }

        public String getHash() {
            return hash;
        }

        public void setGeneratedTime(Long generatedTime) {
            this.generatedTime = generatedTime;
        }

        public void setNumberOfZerosStatus(String numberOfZerosStatus) {
            this.numberOfZerosStatus = numberOfZerosStatus;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5417#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 31 Mar 2023 12:24:07 UTC"
record: 5
